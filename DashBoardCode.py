# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1USSIS20g8rJMHAybrlrXmUNix-1HF86z
"""
import streamlit as st 
from Bio import SeqIO
from Bio.SeqUtils import gc_fraction
import matplotlib.pyplot as plt
from collections import Counter
import plotly.graph_objs as go

st.set_page_config(page_title="🔬ANALISIS DE SECUENCIAS DE ADN", layout="wide")

st.header("SECUENCIA DE ADN")
st.markdown("**Creado por: Michelle Contreras, Camila Pacheco y Paulina Zavala**")

image_path = "./Secuencia.jpg"  
st.image(image_path, caption="Secuencias Geneticas", use_container_width=True)

# Entrada del usuario
st.markdown("### Introduce la secuencia de ADN (puedes pegarla o escribirla):")
user_input = st.text_area("Secuencia de ADN", height=150)

# Procesamiento de la secuencia
if user_input:
    seqadn = user_input.strip().replace(" ", "").replace("\n", "").upper()
    st.markdown("### Información de la Secuencia")
    st.write(f"**Secuencia:** {seqadn}")
    st.write(f"**Longitud:** {len(seqadn)} ")

    # Contenido de GC
    st.markdown("### Contenido de GC")
    gc_content = gc_fraction(seqadn) * 100
    st.write(f"**Porcentaje de GC:** {gc_content:.2f}%")
    
     # Composición de nucleótidos
    st.markdown("### Composición de Nucleótidos")
    nucleotides = {n: seqadn.count(n) / len(seqadn) * 100 for n in 'ACGT'}

    # Gráfico de barras para la composición
    fig_bar = go.Figure(data=[go.Bar(
        x=list(nucleotides.keys()),
        y=list(nucleotides.values()),
        marker=dict(color=['#ff7f7f', '#9b0000', '#dc143c', '#ff6347'])
    )])
    fig_bar.update_layout(
        title="Composición de Nucleótidos del ADN",
        xaxis_title="Nucleótidos",
        yaxis_title="Porcentaje"
    )
    st.plotly_chart(fig_bar)


    # Frecuencia de codones
    st.markdown("### Frecuencia de Codones")
    def get_codons(seq):
        return [seq[i:i+3] for i in range(0, len(seq), 3) if len(seq[i:i+3]) == 3]

    codons = get_codons(seqadn)
    codon_counts = Counter(codons)

    # Preparar datos para la visualización 3D
    x, y, z, values, codon_info = [], [], [], [], []
    for codon, count in codon_counts.items():
        if all(n in 'ACGT' for n in codon):
            x.append('ACGT'.index(codon[0]))
            y.append('ACGT'.index(codon[1]))
            z.append('ACGT'.index(codon[2]))
            values.append(count)
            codon_info.append(f"Codón: {codon}, Frecuencia: {count}")

    trace_3d = go.Scatter3d(
        x=x, y=y, z=z, mode='markers',
        marker=dict(size=12, color=values, colorscale='Viridis', opacity=0.8),
        text=codon_info, hovertemplate=(
            '<b>%{text}</b><br>'
            'Coordenadas: (%{x}, %{y}, %{z})<br>'
            '<extra></extra>'
        )
    )
    layout_3d = go.Layout(
        title="Visualización 3D de Codones",
        scene=dict(
            xaxis=dict(title='Primer Nucleótido'),
            yaxis=dict(title='Segundo Nucleótido'),
            zaxis=dict(title='Tercer Nucleótido')
        )
    )
    fig_3d = go.Figure(data=[trace_3d], layout=layout_3d)
    st.plotly_chart(fig_3d)